// Generated by view binder compiler. Do not edit!
package com.example.layout.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.layout.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RelativeLayoutBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout linear1;

  @NonNull
  public final RelativeLayout relative1;

  @NonNull
  public final RelativeLayout relative2;

  @NonNull
  public final ImageView testImage;

  @NonNull
  public final ImageView testImage2;

  @NonNull
  public final ImageView testImage3;

  private RelativeLayoutBinding(@NonNull RelativeLayout rootView, @NonNull LinearLayout linear1,
      @NonNull RelativeLayout relative1, @NonNull RelativeLayout relative2,
      @NonNull ImageView testImage, @NonNull ImageView testImage2, @NonNull ImageView testImage3) {
    this.rootView = rootView;
    this.linear1 = linear1;
    this.relative1 = relative1;
    this.relative2 = relative2;
    this.testImage = testImage;
    this.testImage2 = testImage2;
    this.testImage3 = testImage3;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RelativeLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RelativeLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.relative_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RelativeLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.linear1;
      LinearLayout linear1 = ViewBindings.findChildViewById(rootView, id);
      if (linear1 == null) {
        break missingId;
      }

      id = R.id.relative1;
      RelativeLayout relative1 = ViewBindings.findChildViewById(rootView, id);
      if (relative1 == null) {
        break missingId;
      }

      id = R.id.relative2;
      RelativeLayout relative2 = ViewBindings.findChildViewById(rootView, id);
      if (relative2 == null) {
        break missingId;
      }

      id = R.id.testImage;
      ImageView testImage = ViewBindings.findChildViewById(rootView, id);
      if (testImage == null) {
        break missingId;
      }

      id = R.id.testImage2;
      ImageView testImage2 = ViewBindings.findChildViewById(rootView, id);
      if (testImage2 == null) {
        break missingId;
      }

      id = R.id.testImage3;
      ImageView testImage3 = ViewBindings.findChildViewById(rootView, id);
      if (testImage3 == null) {
        break missingId;
      }

      return new RelativeLayoutBinding((RelativeLayout) rootView, linear1, relative1, relative2,
          testImage, testImage2, testImage3);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
